pipeline {
        agent any

         environment {
                CREDENTIALS_ID ='Rocket-Chat'
                BUCKET = 'rocket-chat-bucket-dotjson'
                PATTERN = 'server/target/*.jar'
            }

        tools {
            maven 'maven_3.8.6'
            jdk 'jdk11'
        }

        stages {
            stage('Git Checkout') {
                steps {
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'GitHubPasswordLocalSystem', url: 'https://github.com/JasonShuyinta/Rocket-Chat.git']]])
                }
            }

            stage('Junit') {
                steps {
                   withCredentials([string(credentialsId: 'rocket-chat-mongo-test', variable: 'mongo-test')]) {
                        bat 'mvn test -f server/pom.xml -Dspring.data.mongodb.uri=%mongo-test% -Dactive.profile=test'
                   }
                }
            }

            stage('Build Artifacts') {
                steps {
                    withCredentials([string(credentialsId: 'rocket-chat-mongo-prod', variable: 'mongo-prod')]) {
                        bat 'mvn -f server/pom.xml clean install -Dmaven.test.skip=true -Dspring.data.mongodb.uri=%mongo-prod% -Dactive.profile=prod'
                    }
                }
                 post {
                    success {
                        bat '''
                        cd server/target
                        rename \"rocket-chat-app.jar\" \"rocket-chat-%BUILD_NUMBER%.jar\"
                        '''
                        archiveArtifacts 'server/target/*.jar'
                    }
                }
            }

            stage('Store to Google Cloud Storage') {
                steps{
                    // If we name pattern build_environment.txt, this will upload the local file to our GCS bucket.
                    step([$class: 'ClassicUploadStep', credentialsId: env.CREDENTIALS_ID,  bucket: "gs://${env.BUCKET}", pattern: env.PATTERN])
                }
            }

            stage('Build Docker Image') {
                steps {
                    bat '''
                        cd server
                        docker build -t jason9722/rocket-chat-app .
                        '''
                }
            }

            stage('Push to Docker Hub') {
                steps {
                    withCredentials([string(credentialsId: 'DockerId', variable: 'DockerPassword')]) {
                        bat 'docker login -u jason9722 -p %DockerPassword%'
                        bat 'docker push jason9722/rocket-chat-app'
                    }
                }
            }

            stage('Start container on GCP Compute Engine') {
                steps {
                    withCredentials([file(credentialsId: 'gcp-key', variable: 'gcp-key'), string(credentialsId: 'gcp-ip-address', variable: 'gcp-ip-address'), string(credentialsId: 'rocket-chat-app-port', variable: 'port'), string(credentialsId: 'rocket-chat-mongo-prod', variable: 'mongo-prod')]) {
                          bat 'ssh -i %gcp-key% jason@%gcp-ip-address% "sudo docker stop rocketchat" '
                          bat 'ssh -i %gcp-key% jason@%gcp-ip-address% "sudo docker rm rocketchat" '
                          bat 'ssh -i %gcp-key% jason@%gcp-ip-address% "sudo docker rmi jason9722/rocket-chat-app" '
                          bat 'ssh -i %gcp-key% jason@%gcp-ip-address% "sudo docker pull jason9722/rocket-chat-app:latest" '
                          bat 'ssh -i %gcp-key% jason@%gcp-ip-address% "sudo docker run -d -p 8008:8008 --name rocketchat -e --server.port=\"%port%\" -e --spring.data.mongodb.uri=\"%mongo-prod%\" jason9722/rocket-chat-app:latest " '

                        }
                    }
                }
        }
}